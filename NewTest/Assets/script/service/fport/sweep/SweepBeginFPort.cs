//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.18063
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------
using System;

public class SweepBeginFPort : BaseFPort
{ 
	private CallBack<string> callback;
	private EnumSweep type;	

	public void startSweep(int missionId,int missionLevel,int armyId,int sweepTimes,int triggerPK,CallBack<string> callback)
	{  

		this.callback = callback;



		ErlKVMessage message = new ErlKVMessage (FrontPort.SWEEP_BEGIN);
		message.addValue ("fb_id", new ErlInt(missionId));
		message.addValue ("fb_lv", new ErlInt(missionLevel));
		message.addValue("array_id",new ErlInt(armyId));
		message.addValue("sweep_num",new ErlInt(sweepTimes));	
		message.addValue("pvp_swith",new ErlInt(triggerPK));	
		access (message);
	}
		
	public override void read (ErlKVMessage message)
	{
		ErlList data=message.getValue("msg") as ErlList;
		if(data==null)
		{
			string msg=(message.getValue("msg") as ErlType).getValueString();
			if(msg=="null")
			{
				//NO Sweep Info
			}
			else if(msg=="already_in_sweep")
			{

			}
			else
			{
				MessageWindow.ShowAlert (msg);
			}
			if (callback != null)
			{
				callback(msg);
				callback = null;
			}
			return;
		}

		int sweepTimes=0;
		int sweepCDTime=0;
		int sweepMissionSid=0;
		int sweepMissionLevel=0;
		int state=0;
		int startTime=0;
		int pvpCount=0;
		int arrayID = 0;
		int pvePointCost=0;
		int missionId=0;

		int length=data.Value.Length;
		ErlArray itemArray;
		string key;
		int value;
		for(int i=0;i<length;i++)
		{
			itemArray=data.Value[i] as ErlArray;
			key=itemArray.Value[0].getValueString();
			value=StringKit.toInt(itemArray.Value[1].getValueString());
			switch(key)
			{
			case "pvp_num":
				pvpCount=value;
				break;
			case "start_time":
				startTime=value;
				break;
			case "sweep_pve":
				pvePointCost=value;
				break;
			case "cd":
				sweepCDTime=value;
				break;
			case "sweep_num":
				sweepTimes=value;
				break;
			case "fb_id":
				sweepMissionSid=value;
				break;
			case "fb_lv":
				sweepMissionLevel=value;
				break;
			case "state":
				state=value;
				break;
			case "array_id":
				arrayID=value;
				break;
			}
		}
		SweepManagement.Instance.initPvpNum(pvpCount);
		SweepManagement.Instance.SweepCostTime=sweepCDTime;
		SweepManagement.Instance.pvePointCost=pvePointCost/sweepTimes;
		SweepManagement.Instance.M_updateSweepInfo(state,sweepMissionSid,sweepMissionLevel,sweepTimes,startTime,arrayID);
		ArmyManager.Instance.getArmy (arrayID).state = 1;
		Mission mission=MissionInfoManager.Instance.getMissionBySid(sweepMissionSid);
		if(mission!=null)
		{
			if(mission.getChapterType()==ChapterType.STORY) {
				UserManager.Instance.self.costPoint(pvePointCost,MissionEventCostType.COST_PVE);
				FuBenManagerment.Instance.sweepMission(sweepMissionSid,sweepMissionLevel, sweepTimes);
			} else if(mission.getChapterType()==ChapterType.WAR) {
				Chapter chapter=FuBenManagerment.Instance.getWarChapter ();
				if(chapter!=null)
				{
					chapter.addNum(-sweepTimes);//update(srcNum+sweepTimes);
					int srcNum=chapter.getNum();
				}
			}
		}
		if (callback != null)
		{
			callback("ok");
			callback = null;
		}
	}
}


