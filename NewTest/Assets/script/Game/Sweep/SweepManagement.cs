//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.18063
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------
using System;
/// <summary>
/// 扫荡相关管理
/// </summary>
public class SweepManagement
{

	private static SweepManagement instance;

	public static SweepManagement Instance {
		get{ return SingleManager.Instance.getObj ("SweepManagement") as SweepManagement;}
	}

	private Award sweepAward;
	private Award pvpAward;
	private int pvpNum;//PVP次数,每一次可以打3场,关闭后会重新清零
	private bool isTempStorageAdd = false;

	/// <summary>
	/// 剧情副本每次扣除行动力
	/// </summary>
	public int pvePointCost = 0;

	/// <summary>
	/// 扫荡耗时 分为单位
	/// </summary>
	public int SweepCostTime = 180;

	/// <summary>
	/// 当前是否有正在进行的挂机副本
	/// </summary>
	public bool hasSweepMission = false;
//	public bool isWaitForBattleData = false;//是否等待战报推送
	/// <summary>
	/// 当前挂机状态 0-挂机中 1-挂机结束pvp事件处理 
	/// </summary>
	public int state = 0;
	/// <summary>
	/// 挂机中pvp次数累积
	/// </summary>
	public int pvpCount = 0;

	/// <summary>
	/// 当前扫荡的副本ID
	/// </summary>
	public int sweepMissionSid;

	/// <summary>
	/// 扫荡副本难度 只有剧情副本才有用
	/// </summary>
	public int sweepMissionLevel;

	//扫荡使用的队伍
	public int useArrayID = 0;

	//剧情副本=============================

	public int sweepFuben_totalTimes;
	public int sweepFuben_currentTimes;
	public int sweepFuben_startTime;
	public int sweepFuben_endTime;

	//讨伐副本===========================
	public int sweepBoss_totalTimes;
	public int sweepBoss_currentTimes;
	public int sweepBoss_startTime;
	public int sweepBoss_endTime;
	//==================================

	public EnumSweep type;

	public bool playerCanSweep {
		get {
			return UserManager.Instance.self.getUserLevel () >= 15;
		}
	}

	public SweepManagement ()
	{

	}

	public void M_updateSweepInfo (int _state, int _missionSid, int _missionLevel, int _sweepTimes, int _startTime, int arrayID)
	{
		state = _state;
		sweepMissionSid = _missionSid;
		sweepMissionLevel = _missionLevel;
		sweepFuben_currentTimes = 0;
		sweepBoss_currentTimes = 0;
		useArrayID = arrayID;

		Mission mission = MissionInfoManager.Instance.getMissionBySid (_missionSid);
		int chapterType = mission.getChapterType ();
		if (chapterType == ChapterType.STORY) {
			M_updateSweepFubenInfo (_sweepTimes, _startTime);
			type = EnumSweep.fuben;
		} else if (chapterType == ChapterType.WAR) {
			M_updateSweepBossInfo (_sweepTimes, _startTime);
			type = EnumSweep.boss;
		}
	}

	/// <summary>
	/// 更新剧情副本 挂机信息
	/// </summary>
	/// <param name="_totalTimes">_total times.</param>
	/// <param name="_leftTime">_left time.</param>
	private void M_updateSweepFubenInfo (int _totalTimes, int _startTime)
	{
		sweepFuben_totalTimes = _totalTimes;
		sweepFuben_startTime = _startTime;
		sweepFuben_endTime = _startTime + _totalTimes * SweepCostTime;

		int currentTime = ServerTimeKit.getSecondTime ();
		if (currentTime < sweepFuben_endTime) {
			sweepFuben_currentTimes = UnityEngine.Mathf.FloorToInt ((currentTime - _startTime) / SweepCostTime);
		} else {
			sweepFuben_currentTimes = sweepFuben_totalTimes;
		}
		hasSweepMission = true;
	}
	/// <summary>
	/// 更新讨伐Boss 挂机信息
	/// </summary>
	/// <param name="_totalTimes">_total times.</param>
	/// <param name="_leftTime">_left time.</param>
	private void M_updateSweepBossInfo (int _totalTimes, int _startTime)
	{
		sweepBoss_totalTimes = _totalTimes;
		sweepBoss_startTime = _startTime;
		sweepBoss_endTime = _startTime + _totalTimes * SweepCostTime;

		int currentTime = ServerTimeKit.getSecondTime ();	
		if (currentTime < sweepBoss_endTime) {
			sweepBoss_currentTimes = UnityEngine.Mathf.FloorToInt ((currentTime - _startTime) / SweepCostTime);
		} else {
			sweepBoss_currentTimes = sweepBoss_totalTimes;
		}
		hasSweepMission = true;
	}
	/// <summary>
	/// 返回时间倒计时信息
	/// </summary>
	/// <returns>The time info.</returns>
	/// <param name="_type">_type.</param>
	public string M_getTimeInfo (EnumSweep _type)
	{
		int currentTime = ServerTimeKit.getSecondTime ();
		int leftTime = 0;
		switch (_type) {
		case EnumSweep.fuben:
			{
				if (currentTime < sweepFuben_endTime) {
					leftTime = sweepFuben_endTime - currentTime;
					int newTimes = sweepFuben_totalTimes - UnityEngine.Mathf.CeilToInt ((float)leftTime / SweepCostTime);
					sweepFuben_currentTimes = newTimes > 0 ? newTimes : 0;
				} else {
					leftTime = 0;
					sweepFuben_currentTimes = sweepFuben_totalTimes;
				}
			}
			break;
		case EnumSweep.boss:
			{
				if (currentTime < sweepBoss_endTime) {
					leftTime = sweepBoss_endTime - currentTime;
					sweepBoss_currentTimes = sweepBoss_totalTimes - UnityEngine.Mathf.CeilToInt ((float)leftTime / SweepCostTime);
				} else {
					leftTime = 0;
					sweepBoss_currentTimes = sweepBoss_totalTimes;
				}
			}
			break;
		}
		return TimeKit.timeTransform (leftTime * 1000);
		
	}
	/// <summary>
	/// 返回次数信息
	/// </summary>
	/// <returns>The times info.</returns>
	/// <param name="_type">_type.</param>
	public string M_getTimesInfo (EnumSweep _type)
	{
		switch (_type) {
		case EnumSweep.fuben:
			return sweepFuben_currentTimes + "/" + sweepFuben_totalTimes;
		case EnumSweep.boss:
			return sweepBoss_currentTimes + "/" + sweepBoss_totalTimes;
		}
		return string.Empty;
	}
	/// <summary>
	/// 返回是否需要更新标记 根据当前挂机总次数和已经完成次数来比较获得
	/// </summary>
	/// <returns><c>true</c>, if need update flag was m_geted, <c>false</c> otherwise.</returns>
	public bool M_getNeedUpdateFlag (EnumSweep _type)
	{
		switch (_type) {
		case EnumSweep.fuben:
			return sweepFuben_currentTimes < sweepFuben_totalTimes;
		case EnumSweep.boss:
			return sweepBoss_currentTimes < sweepBoss_totalTimes;
		}
		return false;
	}
	/// <summary>
	/// 结算挂机
	/// </summary>
	public void M_endSweepMission ()
	{
		hasSweepMission = false;
	}

	/// <summary>
	/// 初始化挂机奖励信息
	/// </summary>
	public void initSweepAwardInfo ()
	{
		int tmpStorageVersion = StorageManagerment.Instance.tmpStorageVersion;
		SweepGetAwardFPort fport = FPortManager.Instance.getFPort ("SweepGetAwardFPort") as SweepGetAwardFPort;
		fport.getSweepAwardInfo ((_award) => {
			if (StorageManagerment.Instance.tmpStorageVersion != tmpStorageVersion) {
				isTempStorageAdd = true;
			}
			sweepAward = _award;
			if (_award != null) {
				UiManager.Instance.switchWindow<SweepExpWindow> ();
			} else {
				SweepFinishFPort port = FPortManager.Instance.getFPort<SweepFinishFPort> ();
				port.finish (() => {

					BattleGlobal.pvpMode = EnumPvp.nomal;
					PvpInfoManagerment.Instance.clearDate ();
					SweepManagement.Instance.clearData ();

					WindowBase baseWin;
					if (type == EnumSweep.fuben) {
						baseWin = UiManager.Instance.getWindow<MissionChooseWindow> ();
						if (baseWin != null) {
							UiManager.Instance.getWindow<SweepMainWindow> ().finishWindow ();
						} else {
							UiManager.Instance.openWindow<MainWindow> ();
						}
					} else if (type == EnumSweep.boss) {
						baseWin = UiManager.Instance.getWindow<TeamPrepareWindow> ();
						if (baseWin != null) {
							UiManager.Instance.getWindow<SweepMainWindow> ().finishWindow ();
						} else {
							UiManager.Instance.openWindow<MainWindow> ();
						}
					}

				});
			}
		});
	}
	/// <summary>
	/// 初始化扫荡信息
	/// </summary>
	/// <param name="callBackFun">Call back fun.</param>
	public void initSweepInfo (CallBack callBackFun)
	{
		SweepGetInfoFPort fport = FPortManager.Instance.getFPort ("SweepGetInfoFPort") as SweepGetInfoFPort;
		fport.getSweep (callBackFun);
	}

	/// <summary>
	/// 获得扫荡队伍
	/// </summary>
	public Army getSweepArmy ()
	{
		return ArmyManager.Instance.getArmy (Math.Max (useArrayID,ArmyManager.PVE_TEAMID));
	}


	/// <summary>
	/// 提取挂机奖励信息
	/// </summary>
	public Award getSweepAward ()
	{
		return sweepAward;
	}

	/// <summary>
	/// 是否有奖励去了临时仓库
	/// </summary>
	public bool isTempAdd()
	{
		return isTempStorageAdd;
	}

	public void setTempStoreageType()
	{
		isTempStorageAdd = false;
	}

	/// <summary>
	/// 初始化挑战奖励信息
	/// </summary>
	public void initPvpAward (Award _award)
	{
		this.pvpAward = _award;
	}

	/// <summary>
	/// 奖励展示完了记得清理
	/// </summary>
	public void clearPvpAward ()
	{
		pvpAward = null;
	}

	/// <summary>
	/// 提取挑战奖励信息
	/// </summary>
	public Award getPveAward ()
	{
		return pvpAward;
	}

	/// <summary>
	/// 奖励展示完了记得清理
	/// </summary>
	public void clearSweepAward ()
	{
		sweepAward = null;
	}

	public void clearData ()
	{
		sweepAward = null;
		pvpAward = null;
		pvpNum = 0;
		SweepCostTime = 0;
		hasSweepMission = false;
		state = 0;
		sweepMissionSid = 0;
		sweepMissionLevel = 0;
		setTempStoreageType();
	}

	public void rebackCost ()
	{
		switch (type) {
		case EnumSweep.boss:
			//返还讨伐次数
			int costBoss = sweepBoss_totalTimes;
			Chapter chapter = FuBenManagerment.Instance.getWarChapter ();
			if (chapter != null) {
				chapter.addNum (costBoss);
				int srcNum = chapter.getNum ();
			}
			break;
		case EnumSweep.fuben:
			int restitutionTimes = sweepFuben_totalTimes-sweepFuben_currentTimes;
//			int costPve = sweepFuben_totalTimes * pvePointCost;
			int costPve = restitutionTimes * pvePointCost;
			UserManager.Instance.self.addTotalPvEPoint (costPve);
			FuBenManagerment.Instance.sweepMission(sweepMissionSid,sweepMissionLevel,-restitutionTimes);
			break;
		}
	}

	public void calculatePvePoint ()
	{
		int endTime = 0;
		int nowTime = ServerTimeKit.getSecondTime ();

		switch (type) {
		case EnumSweep.boss:
			if (UserManager.Instance.self.getVipLevel () >= SweepConfigManager.Instance.skipBossVipMinLevel) {
				return;
			}
			endTime = sweepBoss_endTime;
			if (nowTime < endTime) {
				//返还讨伐次数
				int costBoss = UnityEngine.Mathf.CeilToInt ((float)(endTime - nowTime) / SweepCostTime);
				Chapter chapter = FuBenManagerment.Instance.getWarChapter ();
				if (chapter != null) {
					chapter.addNum (costBoss);
					int srcNum = chapter.getNum ();
				}
			}
			break;
		case EnumSweep.fuben:
			if (UserManager.Instance.self.getVipLevel () >= SweepConfigManager.Instance.skipStoryVipMinLevel) {
				return;
			}
			endTime = sweepFuben_endTime;
			if (nowTime < endTime) {
				//返回行动力
				int restitutionTimes =  UnityEngine.Mathf.CeilToInt ((float)(endTime - nowTime) / SweepCostTime);
				int costPve = restitutionTimes * pvePointCost;
				UserManager.Instance.self.addTotalPvEPoint (costPve);
				FuBenManagerment.Instance.sweepMission(sweepMissionSid,sweepMissionLevel,-restitutionTimes);
			}
			break;
		}
	}

	/// <summary>
	/// 初始化PVP数量记得清理
	/// </summary>
	public void initPvpNum (int num)
	{
		this.pvpNum = num;
	}

	/// <summary>
	/// 扣除一次PVP
	/// </summary>
	public void usePvpNum ()
	{
		pvpNum--;
		if (pvpNum < 0) {
			pvpNum = 0;
		}
	}

	/// <summary>
	/// 获得PVP数量
	/// </summary>
	public int getPvpNum ()
	{
		return pvpNum > 0 ? pvpNum : 0;
	}
}

public enum EnumSweep
{
	fuben,
	boss
}
